include mixins

doctype html
html
  head
    //- Declare our content as UTF-8
    //- DEV: This is necessary to render i18n strings like Afghanistan
    meta(charset="utf-8")

    //- Declare our page title
    block title
      - throw new Error('No title was specified for page');

    //- Define viewport size to trigger media query support on mobile devices
    //-    http://stackoverflow.com/a/13554916
    //-    https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag
    meta(name="viewport", content="width=device-width, initial-scale=1")

    //- Define our favicon
    link(rel="shortcut icon", href="/favicon.ico")

    //- Add our CSS
    link(rel="stylesheet", href="/dist/css/index.css")
    link(rel="stylesheet", href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css")

    //- Load Sentry to catch/record errors
    //- https://docs.sentry.io/hosted/clients/javascript/
    //- DEV: Sentry is loaded before and separate from other scripts to prevent errors halting one another
    //- DEV: Sentry additionally catches/reports Content-Security-Policy errors
    script(src="https://cdn.ravenjs.com/3.7.0/raven.min.js")
    if locals.sentryBrowserDSN
      +inline-script()
        | Raven.config('#{sentryBrowserDSN}', {
        |   environment: '#{ENV}',
        |   release: '#{gitRevision}'
        | }).install();
        if locals.candidate
          //- https://docs.sentry.io/learn/context/#capturing-the-user
          | Raven.setUserContext({id: '#{candidate.id}'});

    //- If there's a request for clean CSS
    //- DEV: This is used by Gemini during visual tests
    if locals.clean_css
      +inline-script().
        // When the page loads
        document.addEventListener('DOMContentLoaded', function handleDOMContentLoaded () {
          // Remove :visited link styles
          // DEV: We thought a `:visited` style reset would be necessary but nope
          //   If we find out it is, then create an `a` element, grab its color, and put it into a rule
          [].forEach.call(document.styleSheets, function removeVisitedStyles (styleSheet) {
            // If the stylesheet isn't local, then bail out
            // DEV: Firefox throws a security exception when accessing a remote stylesheet's cssRules (or at least HTTP to HTTPS)
            try {
              void styleSheet.cssRules;
            } catch (err) {
              return;
            }

            // Continue removing rules
            [].forEach.call(styleSheet.cssRules, function removeVisitedStylesFn (cssRule, i) {
              // If the rule isn't a hard rule, skip it
              // DEV: We could support :visited styles in media queries but it's overkill
              if (cssRule instanceof window.CSSMediaRule) {
                return;
              }

              // If the selector text doesn't have :visited in it, skip it
              if (cssRule.selectorText.indexOf(':visited') === -1) {
                return;
              }

              // Break down our selector and filter out `:visited`
              //   'text--link:visited, a:visited' -> [text--link:visited, a:visited]
              var selectors = cssRule.selectorText.split(/,\s+/g);
              var nonVisitedSelectors = selectors.filter(function filterVisited (selector) {
                return selector.indexOf(':visited') === -1;
              });

              // If we have no selectors left, remove our rule
              // https://github.com/twolfson/css-controls/blob/0.1.1/lib/css-controls.js#L50
              if (nonVisitedSelectors.length === 0) {
                styleSheet.deleteRule(i);
              // Otherwise, update the rule
              } else {
                cssRule.selectorText = nonVisitedSelectors.join(',');
              }
            });
          });

          // Disable transitions on the page
          // https://github.com/twolfson/css-controls/blob/0.1.1/lib/css-controls.js#L35
          document.styleSheets[0].insertRule('* { transition: none !important; }',
            document.styleSheets[0].cssRules.length);
        });

    //- If we are serving analytics, then output it
    //- https://developers.google.com/analytics/devguides/collection/analyticsjs/pages#pageview_fields
    //- DEV: We naively normalize URLs instead of using internal routes to prevent exposing DoS vectors (paranoia)
    if locals.serveAnalytics
      +inline-script() window._gaqId = '#{googleAnalyticsId}';
      +inline-script().
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
        ga('create', window._gaqId, 'auto');
        ga('set', 'page', document.location.pathname.replace(/[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}/ig, ':uuid'));
        ga('send', 'pageview');

      //- Additionally output any custom events
      if locals.googleAnalyticsEvents
        +inline-script()
          for googleAnalyticsEvent in googleAnalyticsEvents
            //- https://developers.google.com/analytics/devguides/collection/analyticsjs/events
            //- DEV: Example XSS -- company name on `/research-company`
            //-   `</script><script>alert(1);</script><script>`
            //- DEV: `jsStringify` escapes HTML entities to their `\u` value and wraps them in double quotes via `JSON.stringify`
            if !googleAnalyticsEvent.label
              //- Category, action
              | ga('send', 'event', !{jsStringify(googleAnalyticsEvent.category)}, !{jsStringify(googleAnalyticsEvent.action)});
            else if !googleAnalyticsEvent.value
              //- Category, action, label
              | ga('send', 'event', !{jsStringify(googleAnalyticsEvent.category)}, !{jsStringify(googleAnalyticsEvent.action)}, !{jsStringify(googleAnalyticsEvent.label)});
            else
              //- Category, action, label, value
              | ga('send', 'event', !{jsStringify(googleAnalyticsEvent.category)}, !{jsStringify(googleAnalyticsEvent.action)}, !{jsStringify(googleAnalyticsEvent.label)}, !{jsStringify(googleAnalyticsEvent.value)});
  body
    //- Define footer for all pages
    mixin footer()
      div.push--top.text--center.muted
        hr.push-half--bottom
        p.push-half--bottom
          = "Made with "
          span(aria-label="love")= "<3"
          = " by Shoulders of Titans LLC"
        p
          //- TODO: Create about, privacy, and terms pages https://trello.com/c/BbhzXH5B/15-create-about-privacy-and-terms-pages
          a.footer-link(href="/about") About
          a.footer-link(href="/privacy") Privacy
          a.footer-link(href="/terms") Terms
          a.footer-link(href="/blog") Blog
          a.footer-link(href="http://twitter.com/findworkco") Twitter
          a.footer-link(href="mailto:todd@findwork.co?subject=" + encodeURIComponent('Find Work support question')) Support

    //- Define container for notifications to load
    #notification-container

    //- Define a block for lower level layouts
    block base-content

    //- Declare notifications to render
    //- DEV: We intentionally use a `style` so this never ever renders
    #notification-content(style="display: none;")
      //- DEV: `notifications` will not necessarily be defined when a 500 is encountered
      if locals.notifications
        each notificationArr, notificationType in notifications
          if ACCEPTABLE_NOTIFICATION_TYPES.indexOf(notificationType) === -1
            - throw new Error('Unacceptable notification type used');
          for notification in notificationArr
            div(data-notification=notificationType)= notification

    //- Load scripts after body
    script(src="/dist/js/index.js")
