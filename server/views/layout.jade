//- DEV: Designed after
//-   Large: https://app.moqups.com/todd@findwork.co/noWM1oiRBn/edit/page/a83fa0086
//-   Medium: https://app.moqups.com/todd@findwork.co/noWM1oiRBn/edit/page/a13b4d4ec
//-   Small (nav 1): https://app.moqups.com/todd@findwork.co/noWM1oiRBn/edit/page/ab1c48bc9
//-   Small (nav 2): https://app.moqups.com/todd@findwork.co/noWM1oiRBn/edit/page/aeef2d023
//-   Small (non-nav): https://app.moqups.com/todd@findwork.co/noWM1oiRBn/edit/page/a541249ff
extends layout-base

block base-content
  //- Declare common mixins
  mixin calendar-2x-with-date(date)
    //- Font stacking via: http://blog.fontawesome.io/2014/05/19/stacking-text-and-icons/
    span.fa-stack
      i.fa.fa-stack-2x.fa-calendar-o
      strong.fa-stack-1x(style="margin-top: 0.3em", aria-hidden="true")= date

  mixin datepicker(moment)
    //- DEV: We use 2020 as our cap since that's where moment stops
    //- DEV: We use `min/max` to fix slowness bug
    //-   http://stackoverflow.com/a/30325783
    input(type="date", value=moment.format(datepickerFormat), min="2010-01-01", max="2020-12-31")&attributes(attributes)

  mixin timepicker(moment)
    //- DEV: Native uses HH:MM (e.g. 23:10) so we must use that
    //-   https://www.w3.org/TR/html-markup/input.time.html#input.time.attrs.value
    input(type="time", value=moment.format(timepickerFormat))&attributes(attributes)

  mixin timezonepicker(moment)
    //- TODO: When we save this to the server, verify we have the codes in `vendor`
    //-   When saving in the db, preserve as an object for easy queries
    //- TODO: Find best match based on IP as a fallback
    //-   Then, fallback to US Pacific TIme
    //- DEV: We were initially going to use a modal similar to Google Calendar
    //-   However, we realized that (1) the terms are different than CST/CDT abbreviations and (2) modals are a complex interaction
    //- TODO: Sort countries by their name, not code; UAE should be next to USA
    //-   Maybe create a new data structure `[{name: United States, code: US, timezones: [{locale: America/Chicago, abbrs: []}]`
    - var selectedTimezone = moment.tz();
    select(data-chosen)&attributes(attributes)
      //- {US: {America/Chicago: 'Central Standard Time'}}; timezones = {America/Chicago}, countryCode = US
      each timezones, countryCode in timezonesByCountryCode
        //- United States
        - var countryName = countryData.countries[countryCode].name;
        optgroup(label=countryName)
          //- timezoneName = Central Standard Time, timezoneLocale = America/Chicago
          //- TODO: Compute pre-emptively
          - var timezoneLocales = Object.keys(timezones);
          - timezoneLocales.sort(function (a, b) { return timezoneAbbrs[a].join('/') > timezoneAbbrs[b].join('/') });
          each timezoneLocale in timezoneLocales
            - var abbrs = timezoneAbbrs[timezoneLocale].join('/');
            option(selected=selectedTimezone == timezoneLocale, value=countryCode + '-' + timezoneLocale)= abbrs

  mixin datetimepicker(name, moment, options)
    - options = options || {};
    - var delimiter = options.delimiter !== undefined ? options.delimiter : '_';
    div
      +datepicker(moment).form-control(name="#{name}#{delimiter}date")&attributes(attributes)
      = " "
      +timepicker(moment).form-control(name="#{name}#{delimiter}time")
    div
      +timezonepicker(moment).form-control(name="#{name}#{delimiter}timezone")

  mixin reminderpicker(name, moment)
    - var hasReminder = !!moment;
    div(style="display: table")
      div(style="display: table-cell; vertical-align: middle")
        input(name="#{name}_enabled", type="radio", checked=hasReminder, value="yes")
        | &nbsp;
      div(style="display: table-cell; vertical-align: middle; padding: 3px")
        +datetimepicker(name, moment)(id=name)
    div(style="display: table")
      div(style="display: table-cell; vertical-align: middle")
        input(name="#{name}_enabled", type="radio", checked=!hasReminder, value="no")
        | &nbsp;
      div(style="display: table-cell; vertical-align: middle; padding: 3px")
        = "No reminder"

  mixin nav-row(options)
    //- DEV: We use padded half ends to give padding for the selected border
    - var el = options.el || 'div';
    #{el}.nav-row.soft-half--ends(class={'nav-row--selected': options.selected})&attributes(attributes)
      block

  mixin nav-row--link(options)
    //- Override our element as a link
    //- DEV: We use `&attributes` and `block` to make a pass through
    - options.el = 'a';
    +nav-row(options).nav-link&attributes(attributes)
      block

  //- Start our HTML
  //- TODO: Remove `APPLICATION_URL_OVERRIDE` by either add missing mock data for applications
  //-   or waiting until we have actual data
  - var isSchedule = urlPath === '/schedule';
  - var APPLICATION_URL_OVERRIDE = '/application/abcdef-sky-networks-uuid';
  .container
    .grid
      #nav.grid__item.one-whole.large-one-quarter(role="navigation")
        header
          //- DEV: Negative margins are to extend the boundary of our blue background to the gutter
          .nav__top.section--brand-dark(style="margin-left: -9px; margin-right: -9px; padding: 0 9px")
            //- On large screens and schedule page for small screens, always display logo in full
            .medium-hidden.text--center(class={'small-hidden': !isSchedule})
              a(href="/schedule")
                img.nav__logo(alt="Find Work logo", src="/dist/images/white-logo.svg", style="width: 198px")
              p.flush--bottom.soft-half--bottom
                //- TODO: Build signed out state
                a.link--unstyled.muted(href="/settings") todd@findwork.co
            //- On medium screens, show logo with major links
            .small-hidden.large-hidden
              .grid.soft--ends
                .grid__item
                  a(href="/schedule")
                    img.nav__logo(alt="Find Work logo", src="/dist/images/white-logo.svg", style="height: 26px")
                .grid__item(style="margin-top: 6px")
                  - var isSelected = urlPath === '/schedule' || locals.selectedApplication !== undefined;
                  a.delta.link--unstyled(href="/schedule", style=isSelected ? "text-decoration: underline" : "") Schedule
                .grid__item(style="margin-top: 6px")
                  //- TODO: Handle selection of archive
                  a.delta.link--unstyled(href="/archive") Archive
                .float--right.grid__item.text--right(style="margin-top: 6px")
                  span.delta
                    //- TODO: Build signed out state
                    //- DESIGN: Links in dropdown are "Settings", "Log out"
                    //-   https://app.moqups.com/todd@findwork.co/noWM1oiRBn/edit/page/a03ef4dcc
                    span todd@findwork.co
                    = " "
                    i.fa.fa-caret-down(style="position: relative; top: 1px")
            //- On non-schedule small screens, display thin bar with back button
            if !isSchedule
              .medium-and-up-hidden
                .grid.soft-half--ends
                  .grid__item.one-quarter
                    //- TODO: Reconsider having a "Back" button as most mobile devices have some equivalent for this
                    //- Maybe do a full "Nav" via slide out...
                    a.link--unstyled(href="javascript:history.go(-1);")
                      b.fa.fa-angle-left(style="font-size: 34px")
                      = " "
                      span.delta(style="position: relative; top: -4px") Back
                  //- DEV: Same line height as `.fa-angle-left`
                  .grid__item.three-quarters.text--right(style="line-height: 34px")
                    //- TODO: Build signed out state
                    a.link--unstyled.muted(href="/settings") todd@findwork.co
        //- On non-schedule for medium/small pages, hide our schedule listing
        div(class={'medium-and-down-hidden': !isSchedule})
          p.text--center
            a.btn.btn--wide.btn--default.nav-btn(href="/create-application")
              span(aria-hidden="true")= "+ "
              | Add job application

            //- Define mixins for our upcoming content
            - var APP_TYPES = {UPCOMING_INTERVIEW: 'UPCOMING_INTERVIEW', WAITING_FOR_RESPONSE: 'WAITING_FOR_RESPONSE'}
            mixin nav-info__icon(application)
              .nav-info__icon&attributes(attributes)
                //- DEV: We set no tab index to skip redundant links
                a.link--unstyled(href=APPLICATION_URL_OVERRIDE || application.url, tabindex="-1", aria-hidden="true")
                  block

            mixin nav-info__content(application)
              .nav-info__content&attributes(attributes)
                //- DEV: We set no tab index to skip redundant links
                a.link--unstyled(href=APPLICATION_URL_OVERRIDE || application.url, tabindex="-1")
                  block

            mixin nav-row--application(application, type, params)
              +nav-row({selected: application.url === urlPath || (locals.selectedApplication && locals.selectedApplication.id === application.id)}).nav-row--application
                h4.text--normal.flush--bottom
                  a.link--unstyled(href=APPLICATION_URL_OVERRIDE || application.url)
                    strong= application.name
                .grid
                  .grid__item.one-whole.medium-one-half
                    //- TODO: Screenshot edge case: Overflowing lines stay with centered icon
                    .nav-info
                      +nav-info__icon(application)
                        if type == APP_TYPES.UPCOMING_INTERVIEW
                          +calendar-2x-with-date(params.interview.moment.format('D'))
                        else if type == APP_TYPES.WAITING_FOR_RESPONSE
                          i.fa.fa-2x.fa-envelope-o
                        else
                          - throw new Error('Unrecognized type')
                      +nav-info__content(application)
                        if type == APP_TYPES.UPCOMING_INTERVIEW
                          //- Mon Mar 14 at 2:00PM CST
                          = params.interview.moment.format('ddd MMM D [at] h:mmA zz')
                        else if type == APP_TYPES.WAITING_FOR_RESPONSE
                          //- Tue Feb 16
                          = "Last contact: " + application.last_contact_moment.format('ddd MMM D')
                        else
                          - throw new Error('Unrecognized type')

                    .nav-info
                      +nav-info__icon(application)
                        if type == APP_TYPES.UPCOMING_INTERVIEW
                          i.fa.fa-2x.fa-info-circle
                        else if type == APP_TYPES.WAITING_FOR_RESPONSE
                          i.fa.fa-2x.fa-reply
                        else
                          - throw new Error('Unrecognized type')
                      +nav-info__content(application)
                        if type == APP_TYPES.UPCOMING_INTERVIEW
                          //- TODO: Be sure to sanitize details
                          if params.interview.details
                            != params.interview.details
                          else
                            i Nothing provided
                        else if type == APP_TYPES.WAITING_FOR_RESPONSE
                          if application.follow_up_reminder_moment
                            //- Tue Feb 23
                            = "Follow-up on: " + application.follow_up_reminder_moment.format('ddd MMM D')
                          else
                            i TODO: Add placeholder text for no reminder set
                        else
                          - throw new Error('Unrecognized type')
                  .grid__item.small-hidden.large-hidden.medium-one-half
                    //- DESIGN: Make sure links are clickable in textarea
                    //- TODO: Limit height and force scrolling
                    div Notes:
                    div.nav-notes
                      if application.notes
                        = application.notes
                      else
                        i No notes recorded
                //- On small/medium screens, provide a link to the application's page
                .large-hidden
                  a.btn.btn--default.one-whole.nav-btn(href=APPLICATION_URL_OVERRIDE || application.url) View/edit job application

          //- Upcoming interviews section
          h3.flush--bottom(style="font-weight: normal") Upcoming interviews
          //- DEV: This is actually a 1.5x push due to extra padding for link border
          #nav__upcoming-interviews.push--bottom
            if upcomingInterviews.length
              each upcomingInterview in upcomingInterviews
                +nav-row--application(upcomingInterview.application, APP_TYPES.UPCOMING_INTERVIEW, {interview: upcomingInterview})
            else
              p TODO: Add placeholder text for upcoming interviews

          //- Waiting for response section
          h3.flush--bottom(style="font-weight: normal") Waiting for response
          #nav__waiting-for-response.landmark
            if waitingForResponseApplications.length
              each waitingForResponseApplication in waitingForResponseApplications
                +nav-row--application(waitingForResponseApplication, APP_TYPES.WAITING_FOR_RESPONSE)
            else
              p TODO: Add placeholder text for upcoming interviews

          //- Nav links
          //- TODO: Tolerate viewing applications or interviews in archive
          +nav-row--link({selected: urlPath === '/archive'})(href="/archive") Archived applications
          +nav-row--link({selected: urlPath === '/settings'})(href="/settings") Settings

          //- Footer
          +footer({largeWide: false})

      #content.grid__item.one-whole.large-three-quarters(class={'medium-and-down-hidden': isSchedule})
        block content

        //- DEV: On small screens, show a footer after our content
        .large-hidden
          +footer({largeWide: false})
